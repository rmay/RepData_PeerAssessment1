list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
a<-makeCacheMatrix()
a$set(my_m)
a$get()
my_m <- matrix(1:2,2,2)
a$set(my_m)
a$get()
a$setInverse(my_m)
a$getInverse()
a$setInverse(solve(my_m)
)
my_m <- matrix(1:2,4,4)
a$set(my_m)
a$setInverse(solve(my_m))
a$get()
my_m <- matrix(1:4,2,2))
my_m <- matrix(1:4,2,2)
my_m
solve(my_m)
a$set(my_m)
a$get
a$get()
a$setInverse(solve(my_m)
)
a$getInverse()
## For this assignment, assume that the matrix supplied is always invertible.
## makeCacheMatrix creates a special "matrix" object that can cache its inverse.
## cacheSolve computes the inverse of the matrix returned by makeCacheMatrix
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
# The cache starts out NULL
cache <- NULL
set <- function(newMatrix) {
x <<- newMatrix
cache <<- NULL
}
get <- function() x
setInverse <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mat <- x$get()
m <- solve(mat)
x$setInverse(m)
m
}
b <- cacheSolve()
b <- cacheSolve(my_m)
b <- cacheSolve(a)
b
a
a$get()
a
a$get()
b
b <- cacheSolve(a)
b
b
library(datasets)
data(iris)
head(iris)
summary(iris)
?iris
iris$Species == virginica
iris$Species == "virginica"
virlist <- iris$Species == "virginica"
smaller <- iris[virlist]
smaller <- iris[,virlist]
smaller <- iris$Species[virlist]
smaller
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
head(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
?rowmeans
?rowMeans
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
m <- mean(mtcars$mpg, mtcars$cyl)
m <- tapply(mtcars$mpg, mtcars$cyl, mean)
m$4
m
m$[4]
m$[[4]]
m[1:]
m[,1]
dim(m)
head(m)
class(m)
unclass(m)
m[1]
m[1] - m[2]
m[1] - m[3]
m[3]
m[3] - m[1]
m[1] - m[3]
debug(ls)
ls()
debug()
exit
ls
?debug
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
set.seed(1)
rpois(5, 2)
my_var <- rpois(5, 2)
class(my_var)
unclass(my_var)
my_var
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
my_var <- rpois(5, 2)
my_var
?rnorm
?pnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
r
e
y
?rbinom
ls
ls()
?rm
rm(ls())
rm(list=ls())
ls()
load(swirl)
load("swirl")
library("swirl")
swirl
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students, sex_classs, value, -grade)
res <- gather(students, sex_classs, value, -grade)
res <- gather(students, sex_classs, count, -grade)
res <- gather(students2, sex_classs, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
student3
students3
?gather
submit()
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, passed = "" )
mutate(passed, status = "passed" )
passed <- mutate(passed, status = "passed" )
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
day(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = h(now()), minutes = m(now()), seconds = s(now()))
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=12, minutes=34)
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "CHINA")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive, tzone = "Singapore"
)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
ls()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
activity$dateTime
activity$date
activity$time
activity$interval
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
totalSteps
source('~/.active-rstudio-document')
source('~/development/RepData_PeerAssessment1/temp.r')
head(totalSteps)
totalSteps
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
mean
mean(totalSteps, na.rm=TRUE)
median(totalSteps, na.rm=TRUE)
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
median(totalSteps)
mean(totalSteps)
source('~/development/RepData_PeerAssessment1/temp.r')
totalStepsMean
totalStepsMean
totalSteps
source('~/development/RepData_PeerAssessment1/temp.r')
str(activity)
source('~/development/RepData_PeerAssessment1/temp.r')
str(activity)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
meanSteps
str(meanSteps)
names(meanSteps)
dailyActivityPattern <- data.frame(time = names(meanSteps), meanSteps = meanSteps)
str(dailyActivityPattern)
head(dailyActivityPattern)
plot(dailyActivityPattern$time, dailyActivityPattern$meanSteps, type = "l")
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
averages <- aggregate(x=list(steps=activity$steps), by=list(interval=activity$interval), FUN=mean, na.rm=TRUE)
averages
head(averages)
str(averages)
plot(averages$interval, averages$steps, type = "l")
dailyActivityPattern <- aggregate(x = list(meanSteps = activity$steps), by = list(interval = activity$interval), FUN=mean, na.rm=TRUE)
plot(dailyActivityPattern$interval, dailyActivityPattern$meanSteps, type = "l")
source('~/development/RepData_PeerAssessment1/temp.r')
plot(dailyActivityPattern$interval, dailyActivityPattern$meanSteps, type = "l", xlab = "Time Period (5 Minute Intervals)", ylab = "Mean Steps", main = "Daily Activity Pattern")
plot(dailyActivityPattern$interval, dailyActivityPattern$meanSteps, type = "l", xlab = "Time Period (5 Minute Intervals)", ylab = "Steps (Average)", main = "Daily Activity Pattern")
averages[which.max(dailyActivityPattern$meanSteps),]
which.max(dailyActivityPattern$meanSteps)
dailyActivityPattern[which.max(dailyActivityPattern$meanSteps),]
dailyMax <- dailyActivityPattern[which.max(dailyActivityPattern$meanSteps),]
dailyMax[0]
dailyMax[1]
dailyMax[1,]
dailyMax[1:1]
dailyMax[1:2]
dailyMax[2:2]
dailyMax[1:1][0]
dailyMax[1:1][1]
dailyMax
class(dailyMax)
dailyMax$interval
dailyMax$interval[1]
dailyMax$interval[1,2]
dailyMax$interval[1:]
dailyMax$interval
dailyMax$meanSteps
missing <- is.na(activity$steps)
# How many missing
table(missing)
missing
table(missing)
(table(missing))[2:]
(table(missing))[1:]
(table(missing))
summary(activity$steps)
missing <- is.na(activity$steps)
summary(activity$steps)
table(summary(activity$steps))
missing <- is.na(activity$steps)
sum(missing)
sum(is.na(activity$steps))
library(Hmisc)
# Copy the activity data
activityExtroplated <- activity
activityExtroplated$steps <- with(activityExtroplated, impute(steps, mean))
activityExtroplated
str(activityExtroplated)
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
totalStepsExtrapolatedMean
totalStepsExtrapolatedMedian
totalStepsMedian
totalStepsMean
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
mean(totalSteps)
mean(totalSteps, na.rm=TRUE)
tapply(activity$steps, activity$date, FUN=sum)
mean(tapply(activity$steps, activity$date, FUN=sum)
)
mean(tapply(activity$steps, activity$date, FUN=sum))
mean(tapply(activity$steps, activity$date, FUN=sum), na.rm=TRUE)
source('~/development/RepData_PeerAssessment1/temp.r')
totalStepsMean
totalStepsExtrapolatedMean
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
dayTypes
sapply(activityExtrapolated$date, dayType)
weekdays(activityExtrapolated$date)
class((activityExtrapolated$date)
)
source('~/development/RepData_PeerAssessment1/temp.r')
dayTypes
summary(activityExtrapolated$dayType)
source('~/development/RepData_PeerAssessment1/temp.r')
xyplot(activityExtrapolated$meanSteps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityExtrapolated,
type = "l", layout = c(1, 2), col = c("purple"), main = "Average Number of Steps by Time Interval (imputing missing values)",
xlab = "Five-minute time period", ylab = "Avg number of steps")
xyplot(activityExtrapolated$meanSteps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityExtrapolated,
type = "l", layout = c(1, 2), col = c("purple"),
xlab = "Interval", ylab = "Number of Steps")
activityExtrapolated$meanSteps
xyplot(activityExtrapolated$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityExtrapolated,
type = "l", layout = c(1, 2), col = c("purple"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(activityExtrapolated$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityExtrapolated,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(activityExtrapolated$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = totalStepsExtrapolatedMean,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
mean_stps_per_intvl_imput <- aggregate(fill_in_NAs$steps_no_NAs, by = list(fill_in_NAs$interval,
fill_in_NAs$day_of_week), FUN = "mean", na.rm = TRUE)
colnames(mean_stps_per_intvl_imput) <- c("interval", "weekday_weekend", "avg_steps")
sort_order <- order(as.numeric(mean_stps_per_intvl_imput$interval))
mean_stps_per_intvl_imput <- mean_stps_per_intvl_imput[sort_order, ]
averages <- aggregate(steps ~ interval + day, data=activityExtrapolated, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + day, data=activityExtrapolated, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + dayType, data=activityExtrapolated, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages
xyplot(activityExtrapolated$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = averages,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
mean_stps_per_intvl_imput <- aggregate(activityExtrapolated$stepss, by = list(activityExtrapolated$interval,
activityExtrapolated$dayType), FUN = "mean", na.rm = TRUE)
mean_stps_per_intvl_imput <- aggregate(activityExtrapolated$steps, by = list(activityExtrapolated$interval,
activityExtrapolated$dayType), FUN = "mean", na.rm = TRUE)
activityByDayType <- aggregate(activityExtrapolated$steps, by = list(activityExtrapolated$interval, activityExtrapolated$dayType), FUN = "mean", na.rm = TRUE)
str(activityByDayType)
head(activityByDayType)
colnames(activityByDayType) <- c("interval", "dayType", "steps")
head(activityByDayType)
activityByDayType <- aggregate(activityExtrapolated$steps, by = list(activityExtrapolated$interval, activityExtrapolated$dayType), FUN = "mean", na.rm = TRUE)
# Add column names to make it easier to use
colnames(activityByDayType) <- c("interval", "dayType", "steps")
##sortOrder <- order(as.numeric(activityByDayType$interval))
##activityByDayType <- activityByDayType[sort_order, ]
# Plot the data to two different plots, one for weekdays, the other weekends
xyplot(activityExtrapolated$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
plot(dailyActivityPattern$interval, dailyActivityPattern$meanSteps, type = "l", xlab = "Time Period (5 Minute Intervals)", ylab = "Steps (Averaged)", main = "Daily Activity Pattern")
xyplot(dailyActivityPattern$meanSteps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(dailyActivityPattern$meanSteps ~ as.numeric(interval) | as.factor("dayType"), data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(dailyActivityPattern$meanSteps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(activityByDayType$steps ~ as.numeric(interval) | activityExtrapolated$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
activityByDayType
str(activityByDayType)
activityExtrapolated$dayType
str(activityExtrapolated$dayType)
xyplot(activityByDayType$steps ~ as.numeric(interval) | activityByDayType$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
source('~/development/RepData_PeerAssessment1/temp.r')
source('~/development/RepData_PeerAssessment1/temp.r')
xyplot(activityByDayType$steps ~ as.numeric(interval) | activityByDayType$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
xyplot(activityByDayType$steps ~ as.numeric(activityByDayType$interval) | activityByDayType$dayType, data = activityByDayType,
type = "l", layout = c(1, 2), col = c("blue"),
xlab = "Interval", ylab = "Number of Steps")
mean(totalStepsExtrapolated)
totalStepsExtrapolatedMean
totalStepsExtrapolatedMean
totalStepsExtrapolatedMean[1:]
class(totalStepsExtrapolatedMean)
str(totalStepsExtrapolatedMean)
round(totalStepsExtrapolatedMean,2)
round(mean(totalStepsExtrapolated), 2)
class(meanTotSteps)
meanTotSteps <- round(mean(totalSteps), 2)
class(meanTotSteps)
